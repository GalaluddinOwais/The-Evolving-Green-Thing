import random
import math


def manifest(w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63, w64, w65, w66, w67, w68, w69, w70, w71, w72, w73, w74, w75, w76, w77, w78, w79, w80, w81, w82, w83, w84,w85,w86,w87,w88, b1, b2, b3, b4, b5, b6, b7, b8,b9,b10,b11 ):
    import pygame
    import pymunk
    import pymunk.pygame_util

    pygame.init()

    WIDTH, HEIGHT = 400, 400

    window = pygame.display.set_mode((WIDTH, HEIGHT))
    window_space_linkage = pymunk.pygame_util.DrawOptions(window)

    # node1 = x1 * v1 + x2 * vv1 + x3 * vvv1 + x4 * vvvv1 + d
    # node2 = x1 * v2 + x2 * vv2 + x3 * vvv2 + x4 * vvvv2 + d
    # node3 = x1 * v3 + x2 * vv3 + x3 * vvv3 + x4 * vvvv3 + d
    # node4 = x1 * v4 + x2 * vv4 + x3 * vvv4 + x4 * vvvv4 + d
    # output1 = node1 * vvvvv1 + node2 * vvvvvv1 + node3 * vvvvvvv1 + node4 * vvvvvvvv1 + D
    # output2 = node1 * vvvvv2 + node2 * vvvvvv2 + node3 * vvvvvvv2 + node4 * vvvvvvvv2 + D


    #     node1 = x1 * v1 + x2 * vv1 + x3 * vvv1 + x4 * vvvv1 + x5 * w1 + x6 * ww1 + x7 * www1 + x8 * wwww1 + x9*wwwww1 +x10*wwwwww1+ d1
    #     node2 = x1 * v2 + x2 * vv2 + x3 * vvv2 + x4 * vvvv2 + x5 * w2 + x6 * ww2 + x7 * www2 + x8 * wwww2 + x9*wwwww2 +x10*wwwwww2+ d2
    #     node3 = x1 * v3 + x2 * vv3 + x3 * vvv3 + x4 * vvvv3 + x5 * w3 + x6 * ww3 + x7 * www3 + x8 * wwww3 + x9*wwwww3 +x10*wwwwww3+ d3
    #     node11 = node1 * v4 + node2 * vv4 + node3 * vvv4 + d4
    #     node22 = node1 * vvvv4 + node2 * vvvvv1 + node3 * vvvvvv1 + d5
    #     node33 = node1 * vvvvvvv1 + node2 * vvvvvvvv1 + node3 * vvvvv2 + d6
    #     output1 = node11 * vvvvvv2 + node22 * vvvvvvv2 + node33 * vvvvvvvv2 + D7
    #     output2 = node11 * vvvvvv3 + node22 * vvvvvvv3 + node33 * vvvvvvvv3 + D8

    # node1 = x1 * w1 + x2 * w2 + x3 * w3 + x4 * w4 + x5 * w5 + x6 * w6 + x7 * w7 + x8 * w8 + x9 * w9 + x10 * w10 + x11 * w11 + x12 * w12 + b1
    #
    # node2 = x1 * w13 + x2 * w14 + x3 * w15 + x4 * w16 + x5 * w17 + x6 * w18 + x7 * w19 + x8 * w20 + x9 * w21 + x10 * w22 + x11 * w23 + x12 * w24 + b2
    #
    # node3 = x1 * w25 + x2 * w26 + x3 * w27 + x4 * w28 + x5 * w29 + x6 * w30 + x7 * w31 + x8 * w32 + x9 * w33 + x10 * w34 + x11 * w35 + x12 * w36 + b3
    #
    # node4 = x1 * w37 + x2 * w38 + x3 * w39 + x4 * w40 + x5 * w41 + x6 * w42 + x7 * w43 + x8 * w44 + x9 * w45 + x10 * w46 + x11 * w47 + x12 * w48 + b4
    #
    # node5 = x1 * w49 + x2 * w50 + x3 * w51 + x4 * w52 + x5 * w53 + x6 * w54 + x7 * w55 + x8 * w56 + x9 * w57 + x10 * w58 + x11 * w59 + x12 * w60 + b5
    #
    # node6 = x1 * w61 + x2 * w62 + x3 * w63 + x4 * w64 + x5 * w65 + x6 * w66 + x7 * w67 + x8 * w68 + x9 * w69 + x10 * w70 + x11 * w71 + x12 * w72 + b6
    #
    # output1 = node1 * w73 + node2 * w74 + node3 * w75 + node4 * w76 + node5 * w77 + node6 * w78 + b7
    #
    # output2 = node1 * w79 + node2 * w80 + node3 * w81 + node4 * w82 + node5 * w83 + node6 * w84 + b8

    def neural_network(w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63, w64, w65, w66, w67, w68, w69, w70, w71, w72, w73, w74, w75, w76, w77, w78, w79, w80, w81, w82, w83, w84,w85,w86,w87,w88, b1, b2, b3, b4, b5, b6, b7, b8,b9,b10,b11,
                       x1, x2,x3, x4, x5, x6, x7, x8,x9,x10,x11,x12):

        node1 = x1 * w1 + x2 * w2 + x3 * w3 + x4 * w4 + x5 * w5 + x6 * w6 + x7 * w7 + x8 * w8 + x9 * w9 + x10 * w10 + x11 * w11 + x12 * w12 + b1

        node2 = x1 * w13 + x2 * w14 + x3 * w15 + x4 * w16 + x5 * w17 + x6 * w18 + x7 * w19 + x8 * w20 + x9 * w21 + x10 * w22 + x11 * w23 + x12 * w24 + b2

        node3 = x1 * w25 + x2 * w26 + x3 * w27 + x4 * w28 + x5 * w29 + x6 * w30 + x7 * w31 + x8 * w32 + x9 * w33 + x10 * w34 + x11 * w35 + x12 * w36 + b3

        node4 = x1 * w37 + x2 * w38 + x3 * w39 + x4 * w40 + x5 * w41 + x6 * w42 + x7 * w43 + x8 * w44 + x9 * w45 + x10 * w46 + x11 * w47 + x12 * w48 + b4

        node5 = x1 * w49 + x2 * w50 + x3 * w51 + x4 * w52 + x5 * w53 + x6 * w54 + x7 * w55 + x8 * w56 + x9 * w57 + x10 * w58 + x11 * w59 + x12 * w60 + b5

        node11 = node1 * w61 + node2 * w62 + node3 * w63 + node4 * w64 + node5 * w65 +b6
        node22 = node1 * w66 + node2 * w67 + node3 * w68 + node4 * w69 + node5 * w70 +b7
        node33 = node1 * w71 + node2 * w72 + node3 * w73 + node4 * w74 + node5 * w75 +b8
        node44 = node1 * w76 + node2 * w77 + node3 * w78 + node4 * w79 + node5 * w80 +b9

        output1 = node11 * w81 + node22 * w82 +node33 * w83 +node44 * w84 + b10

        output2 = node11 * w85 + node22 * w86 +node33 * w87 +node44 * w88 +b11


        return [output1, output2]

    def enemy_neural_network(v1, w1, d1, v2, w2, d2, v3, w3, d3, v4, w4, d4, VVV1, VVVV1, VVV2, VVVV2, VVV3, VVVV3,
                             VVV4,
                             VVVV4, D1, D2, x1, x2):
        hidden_node_1_output = (x1 * v1 + x2 * w1 + d1)
        hidden_node_2_output = (x1 * v2 + x2 * w2 + d2)
        hidden_node_3_output = (x1 * v3 + x2 * w3 + d3)
        hidden_node_4_output = (x1 * v4 + x2 * w4 + d4)
        output1 = VVV1 * hidden_node_1_output + VVV2 * hidden_node_2_output + VVV3 * hidden_node_3_output + VVV4 * hidden_node_4_output + D1
        output2 = VVVV1 * hidden_node_1_output + VVVV2 * hidden_node_2_output + VVVV3 * hidden_node_3_output + VVVV4 * hidden_node_4_output + D2
        return [output1, output2]

    def run(window):

        run = True
        clock = pygame.time.Clock()
        fps = 60
        dt = 1 / fps

        space = pymunk.Space()
        space.gravity = (0, 981)

        body = pymunk.Body(body_type=pymunk.Body.STATIC)
        body.position = (WIDTH / 2, window.get_height() - 10)
        shape = pymunk.Poly.create_box(body, (WIDTH, 20))
        # shape.elasticity = .4
        # shape.friction = .5
        space.add(body, shape)

        body = pymunk.Body(body_type=pymunk.Body.STATIC)
        body.position = (WIDTH, HEIGHT / 2)
        shape = pymunk.Poly.create_box(body, (20, window.get_height()))
        # shape.elasticity = .4
        # shape.friction = .5
        space.add(body, shape)

        ########################################
        color = (random.uniform(0, 255), random.uniform(0, 255), random.uniform(0, 255), 0)
        center_body_enemy = pymunk.Body(body_type=pymunk.Body.DYNAMIC)
        center_body_enemy.position = (WIDTH / 3, HEIGHT / 3)
        shape = pymunk.Circle(center_body_enemy, 10)
        shape.mass = 20
        shape.color = color
        space.add(center_body_enemy, shape)

        center_body_enemy2 = pymunk.Body(body_type=pymunk.Body.DYNAMIC)
        center_body_enemy2.position = (WIDTH * 2 / 3, HEIGHT * 2 / 3)
        shape2 = pymunk.Circle(center_body_enemy2, 10)
        shape2.mass = 20
        shape2.color = color
        space.add(center_body_enemy2, shape2)

        #######################################
        body = pymunk.Body(body_type=pymunk.Body.STATIC)
        body.position = (0, window.get_height() / 2)
        shapee = pymunk.Poly.create_box(body, (20, window.get_height()))
        # shapee.elasticity = 0.4
        # shapee.friction = 0.5
        space.add(body, shapee)
        body = pymunk.Body(body_type=pymunk.Body.STATIC)
        body.position = (window.get_width() / 2, -30)
        shape = pymunk.Poly.create_box(body, (window.get_width(), 100))
        # shape.elasticity = 0.4
        # shape.friction = 0.5
        space.add(body, shape)

        center_body = pymunk.Body(body_type=pymunk.Body.DYNAMIC)
        center_body.position = (35, HEIGHT - 30)
        shapec = pymunk.Circle(center_body, 10)
        shapec.mass = .1
        shapec.elasticity = 2.3
        shapec.friction = 2
        shapec.color = (21, 120, 20, 0)
        space.add(center_body, shapec)

        enemy1_force = (-15000, -35000)
        frame = 0
        fitness = 0

        # previous_pos = center_body.position
        # previous_pos_enemy = center_body_enemy.position
        # previous_pos_enemy2 = center_body_enemy2.position
        while run:
            frame = frame + 1
            distance_1 = math.sqrt(math.pow(center_body.position[0] - center_body_enemy.position[0], 2) + math.pow(
                center_body.position[1] - center_body_enemy.position[1], 2))
            distance_2 = math.sqrt(math.pow(center_body.position[0] - center_body_enemy2.position[0], 2) + math.pow(
                center_body.position[1] - center_body_enemy2.position[1], 2))
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    # run = False
                    # break
                    return (fitness)

            if distance_1 <= 10 * 2 \
                    or distance_2 <= 10 * 2:
                return fitness

            if frame == 60 * 60 * 3:
                return fitness

            if center_body.position[0] > WIDTH or center_body.position[0] < 0 or center_body.position[1] > HEIGHT or \
                    center_body.position[1] < 0:

                # space.remove(center_body, shapec)
                # center_body = pymunk.Body(body_type=pymunk.Body.DYNAMIC)
                # center_body.position = previous_pos
                # shapec = pymunk.Circle(center_body, 10)
                # shapec.mass = .1
                # shapec.elasticity = 2.3
                # shapec.friction = 2
                # shapec.color = (21, 120, 20, 0)
                # space.add(center_body, shapec)
                print('glitch! too fast friendly ball went out of the boundaries')
                return fitness


            if center_body_enemy.position[0] > WIDTH or center_body_enemy.position[0] < 0 or \
                    center_body_enemy.position[1] > HEIGHT or center_body_enemy.position[1] < 0 :

                # space.remove(center_body_enemy, shape)
                # center_body_enemy = pymunk.Body(body_type=pymunk.Body.DYNAMIC)
                # center_body_enemy.position = previous_pos_enemy
                # shape = pymunk.Circle(center_body_enemy, 10)
                # shape.mass = 20
                # shape.color = color
                # space.add(center_body_enemy, shape)
                print('glitch! too fast enemy1 ball went out of the boundaries')
                return fitness



            if    center_body_enemy2.position[0] > WIDTH or center_body_enemy2.position[0] < 0 or \
                center_body_enemy2.position[1] > HEIGHT or center_body_enemy2.position[1] < 0:
                # space.remove(center_body_enemy2, shape2)
                # center_body_enemy2 = pymunk.Body(body_type=pymunk.Body.DYNAMIC)
                # center_body_enemy2.position = previous_pos_enemy2
                # shape2 = pymunk.Circle(center_body_enemy2, 10)
                # shape2.mass = 20
                # shape2.color = color
                # space.add(center_body_enemy2, shape2)
                print('glitch! too fast enemy2 ball went out of the boundaries')
                return fitness


            # # # # # #
            # (x)
            #  (15000) --> *-1 --> (-15000)
            # (-15000) --> *-1 -->  (15000)

            # (y)
            # (   0  ) --> +35000 --> (35000) --> *-1 --> (-35000)
            # (-35000) --> +35000 --> (  0  ) --> *-1 --> (   0  )
            
            
            # # # # # #

            if frame % 240 == 0:
                enemy1_force = (-15000, -35000)

            elif frame % 180 == 0:
                enemy1_force = (15000, -35000)

            elif frame % 120 == 0:
                enemy1_force = (-15000, 0)

            elif frame % 60 == 0:
                enemy1_force = (15000, 0)

            center_body_enemy.apply_force_at_local_point(enemy1_force, (0, 0))

            enemy2_neural_network_output = enemy_neural_network(-0.7540979010233855, 6.778878818143113, -2.6855252451531086, 8.455380288478416, 3.693917348250075,
                   9.306492256022576, -7.236741361017039, -7.0439586699553125, 8.403283162955269, -5.6020558929686555,
                   -6.039465596453688, -9.120959513164772, 1.7652579083178725, -3.123894206518978, -8.740218780670867,
                   -8.15113981921759, -9.979700867248319, 5.557066721407448, 7.707349576922642, 6.073577015082407,
                   9.535713619818168, 9.872941457130725,
                                                                center_body_enemy2.position[0] - center_body.position[
                                                                    0],
                                                                center_body_enemy2.position[1] - center_body.position[
                                                                    1])

            center_body_enemy2.apply_force_at_local_point(
                (enemy2_neural_network_output[0], enemy2_neural_network_output[1]), (0, 0))

            neural_network_output = neural_network(w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63, w64, w65, w66, w67, w68, w69, w70, w71, w72, w73, w74, w75, w76, w77, w78, w79, w80, w81, w82, w83, w84,w85,w86,w87,w88, b1, b2, b3, b4, b5, b6, b7, b8,b9,b10,b11,
                                                   center_body_enemy.velocity[0],
                                                   center_body_enemy.velocity[1],
                                                   center_body_enemy2.velocity[0],
                                                   center_body_enemy2.velocity[1],
                                                   center_body.velocity[0],
                                                   center_body.velocity[1],
                                                   center_body_enemy.position[0],
                                                   center_body_enemy.position[1],
                                                   center_body_enemy2.position[0],
                                                   center_body_enemy2.position[1],
                                                   center_body.position[0],
                                                   center_body.position[1])
            center_body.apply_force_at_local_point((neural_network_output[0], neural_network_output[1]), (0, 0))

            fitness += 1

            # if center_body.position[0]>10 and center_body.position[0]<WIDTH-10 and center_body.position[1]>10 and center_body.position[1]<HEIGHT-10:
            #     previous_pos = center_body.position
            #
            # if center_body_enemy.position[0]>10 and center_body_enemy.position[0]<WIDTH-10 and center_body_enemy.position[1]>10 and center_body_enemy.position[1]<HEIGHT-10:
            #     previous_pos_enemy = center_body_enemy.position
            #
            # if center_body_enemy2.position[0] > 10 and center_body_enemy2.position[0] < WIDTH - 10 and \
            #         center_body_enemy2.position[1] > 10 and center_body_enemy2.position[1] < HEIGHT - 10:
            #     previous_pos_enemy2 = center_body_enemy2.position

            window.fill("black")
            space.debug_draw(window_space_linkage)
            pygame.display.update()

            space.step(dt)
            clock.tick(fps)

        pygame.quit()

    return (run(window))


if __name__ == "__main__":
    # print(manifest(0.559699275255479, 0.8013309618113191, 0.08338701490993022, -0.3064226972967041, -0.6552042010946098, 0.7470729250404746, -0.4135972777521839, 0.0187785185445426, 0.9068719880896925, 0.8450774231070375, 0.45366301876283144, 0.8371537340994002, 0.5184739500735651, -0.23171344481052225, 0.3024461249795527, -0.7335620863940253, -0.0932630037456943, -0.9595668587677866, -0.3933663406517227, -0.40838487068917284, -0.35646888502974794, 0.25891941915425165, 0.8271160337466472, 0.5211043187525222, -0.28773666491221395, 0.9557369880535365, -0.7133680290596156, -0.479287360946937, -0.902759821307692, 0.6282826970211521, -0.537405059223423, -0.094077799637581, 0.39719090552083425, 0.9111464232159618, 0.8656716950688623, -0.2629266496285929, -0.4156041287599024, -0.6933437137224145, -0.6939965268055293, -0.3521847719542719, 0.6972917457979049, 0.5041978755236698, -0.8241761595459032, -0.3422056704186154, -0.9710399460520782, 0.3771080394587101, 0.9145405865754284, 0.9835737164788523, 0.8082366055596297, 0.3840847741305822, 0.2547610181080453, 0.32010937713546483, 0.7656235809343597, -0.5332258272751629, 0.05229946651419892, -0.5541761016746098, 0.9736243489476499, 0.731555584776238, 0.5457618042447461, -0.4448737015275219, -0.5392016921827363, 0.5716996291470369, -0.6960578680932665, -0.5414212165277654, -0.4090285597719858, 0.39104918929460597, 0.5189725236419076, 0.3706899897538458, -0.22933712076679225, -0.7407993350376323, 0.46855169130662744, -0.5135781060387206, -0.4497768123599397, -0.1203750614343082, 0.5829588485326991, 0.17070662909228052, -0.9192578428146998, -0.693094399739081, 0.8211883210524216, -0.5590711649998357, 0.4166533078849113, 0.6890049438853239, -0.7955532850551825, -0.5283919209160008, 0.8188500216956416, 0.5030542908939826, 0.41336728701435743, -0.49690469956134375, 2.6467173389641587, 2.995317426901443, -3.6346487715163387, -0.8911584336840219, -1.8101917520628392, 2.6911308018138858, -3.6937512721388917, 2.00979276489379, -3.7765192063618604, 2.987740907256258, 0.33212884695798284))
    # print(manifest(0.559699275255479, 0.8013309618113191, 0.08338701490993022, -0.3064226972967041, -0.6552042010946098, 0.7470729250404746, -0.4135972777521839, 0.0187785185445426, 0.9068719880896925, 0.8450774231070375, 0.45366301876283144, 0.8371537340994002, 0.5184739500735651, -0.23171344481052225, 0.3024461249795527, -0.7335620863940253, -0.0932630037456943, -0.9595668587677866, -0.3933663406517227, -0.40838487068917284, -0.35646888502974794, 0.25891941915425165, 0.8271160337466472, 0.5211043187525222, -0.28773666491221395, 0.9557369880535365, -0.7133680290596156, -0.479287360946937, -0.902759821307692, 0.6282826970211521, -0.537405059223423, -0.094077799637581, 0.39719090552083425, 0.9111464232159618, 0.8656716950688623, -0.2629266496285929, -0.4156041287599024, -0.6933437137224145, -0.6939965268055293, -0.3521847719542719, 0.6972917457979049, 0.5041978755236698, -0.8241761595459032, -0.3422056704186154, -0.9710399460520782, 0.3771080394587101, 0.9145405865754284, 0.9835737164788523, 0.8082366055596297, 0.3840847741305822, 0.2547610181080453, 0.32010937713546483, 0.7656235809343597, -0.5332258272751629, 0.05229946651419892, -0.5541761016746098, 0.9736243489476499, 0.731555584776238, 0.5457618042447461, -0.4448737015275219, -0.5392016921827363, 0.5716996291470369, -0.6960578680932665, -0.5414212165277654, -0.4090285597719858, 0.39104918929460597, 0.5189725236419076, 0.3706899897538458, -0.22933712076679225, -0.7407993350376323, 0.46855169130662744, -0.5135781060387206, -0.4497768123599397, -0.1203750614343082, 0.5829588485326991, 0.17070662909228052, -0.9192578428146998, -0.693094399739081, 0.8211883210524216, -0.5590711649998357, 0.4166533078849113, 0.6890049438853239, -0.7955532850551825, -0.5283919209160008, 0.8188500216956416, 0.5030542908939826, 0.41336728701435743, -0.49690469956134375, 2.6467173389641587, 2.995317426901443, -3.6346487715163387, -1.446474812468808, -1.8101917520628392, 2.6911308018138858, -3.6937512721388917, 2.00979276489379, -3.7765192063618604, 2.987740907256258, 0.33212884695798284))
    # print(manifest(0.559699275255479, 0.8013309618113191, 0.08338701490993022, -0.3064226972967041, -0.6552042010946098, 0.7470729250404746, -0.4135972777521839, 0.0187785185445426, 0.9068719880896925, 0.8450774231070375, 0.45366301876283144, 0.8371537340994002, 0.5184739500735651, -0.23171344481052225, 0.3024461249795527, -0.7335620863940253, -0.0932630037456943, -0.9595668587677866, -0.3933663406517227, -0.40838487068917284, -0.35646888502974794, 0.25891941915425165, 0.8271160337466472, 0.5211043187525222, -0.28773666491221395, 0.9557369880535365, -0.7133680290596156, -0.479287360946937, -0.902759821307692, 0.6282826970211521, -0.537405059223423, -0.094077799637581, 0.39719090552083425, 0.9111464232159618, 0.44601570469705787, -0.2629266496285929, -0.4156041287599024, -0.6933437137224145, -0.6939965268055293, -0.3521847719542719, 0.6972917457979049, 0.5041978755236698, -0.8241761595459032, -0.3422056704186154, -0.9710399460520782, 0.3771080394587101, 0.9145405865754284, 0.9835737164788523, 0.8082366055596297, 0.3840847741305822, 0.2547610181080453, 0.32010937713546483, 0.7656235809343597, -0.5332258272751629, 0.05229946651419892, -0.5541761016746098, 0.9736243489476499, 0.731555584776238, 0.5457618042447461, -0.4448737015275219, -0.5392016921827363, 0.5716996291470369, -0.6960578680932665, -0.5414212165277654, -0.4090285597719858, 0.39104918929460597, 0.5189725236419076, 0.3706899897538458, -0.22933712076679225, -0.7407993350376323, 0.46855169130662744, -0.5135781060387206, -0.4497768123599397, -0.1203750614343082, 0.5829588485326991, 0.17070662909228052, -0.9192578428146998, -0.693094399739081, 0.8211883210524216, -0.5590711649998357, 0.4166533078849113, 0.6890049438853239, -0.7955532850551825, -0.5283919209160008, 0.8188500216956416, 0.5030542908939826, 0.41336728701435743, -0.49690469956134375, 2.691105435071184, 2.995317426901443, -3.891023452121332, -1.446474812468808, -1.8101917520628392, 2.6911308018138858, -3.6937512721388917, 2.00979276489379, -3.7765192063618604, 2.987740907256258, 0.33212884695798284))
    # print(manifest(0.559699275255479, 0.8013309618113191, 0.08338701490993022, -0.3064226972967041, -0.6552042010946098, 0.7470729250404746, -0.4135972777521839, 0.0187785185445426, 0.9068719880896925, 0.8450774231070375, 0.45366301876283144, 0.8371537340994002, 0.5184739500735651, -0.23171344481052225, 0.3024461249795527, -0.7335620863940253, -0.0932630037456943, -0.9595668587677866, -0.3933663406517227, -0.40838487068917284, -0.35646888502974794, 0.25891941915425165, 0.8271160337466472, 0.5211043187525222, -0.28773666491221395, 0.9557369880535365, -0.7133680290596156, -0.479287360946937, -0.902759821307692, 0.6282826970211521, -0.537405059223423, -0.094077799637581, 0.39719090552083425, 0.9111464232159618, 0.44601570469705787, -0.2629266496285929, -0.4156041287599024, -0.6933437137224145, -0.6939965268055293, -0.3521847719542719, 0.6972917457979049, 0.5041978755236698, -0.8241761595459032, -0.3422056704186154, -0.9710399460520782, 0.3771080394587101, 0.9145405865754284, 0.9835737164788523, 0.8082366055596297, 0.3840847741305822, 0.2547610181080453, 0.32010937713546483, 0.7656235809343597, -0.5332258272751629, 0.05229946651419892, -0.5541761016746098, 0.9736243489476499, 0.731555584776238, 0.5457618042447461, -0.4448737015275219, -0.5392016921827363, 0.5716996291470369, -0.6960578680932665, -0.5414212165277654, -0.4090285597719858, 0.39104918929460597, 0.5189725236419076, 0.3706899897538458, -0.22933712076679225, -0.7407993350376323, 0.46855169130662744, -0.5135781060387206, -0.4497768123599397, -0.1203750614343082, 0.5829588485326991, 0.17070662909228052, -0.9192578428146998, -0.693094399739081, 0.8211883210524216, -0.5590711649998357, 0.4166533078849113, 0.6890049438853239, -0.7955532850551825, -0.5283919209160008, 0.8188500216956416, 0.5030542908939826, 0.41336728701435743, -0.49690469956134375, 2.6467173389641587, 2.995317426901443, -3.6346487715163387, -0.8911584336840219, -1.8101917520628392, 2.6911308018138858, -3.6937512721388917, 2.00979276489379, -3.7765192063618604, 2.987740907256258, 0.33212884695798284))
    # print(manifest(0.559699275255479, 0.8013309618113191, 0.08338701490993022, -0.3064226972967041, -0.6552042010946098, 0.7470729250404746, -0.4135972777521839, 0.0187785185445426, 0.9068719880896925, 0.8450774231070375, 0.45366301876283144, 0.8371537340994002, 0.5184739500735651, -0.23171344481052225, 0.3024461249795527, -0.7335620863940253, -0.0932630037456943, -0.9595668587677866, -0.3933663406517227, -0.40838487068917284, -0.35646888502974794, 0.25891941915425165, 0.8271160337466472, 0.5211043187525222, -0.28773666491221395, 0.9557369880535365, -0.7133680290596156, -0.479287360946937, -0.902759821307692, 0.6282826970211521, -0.537405059223423, -0.094077799637581, 0.39719090552083425, 0.9111464232159618, 0.44601570469705787, -0.2629266496285929, -0.4156041287599024, -0.6933437137224145, -0.6939965268055293, -0.3521847719542719, 0.6972917457979049, 0.5041978755236698, -0.8241761595459032, -0.3422056704186154, -0.9710399460520782, 0.3771080394587101, 0.9145405865754284, 0.9835737164788523, 0.8082366055596297, 0.3840847741305822, 0.2547610181080453, 0.32010937713546483, 0.7656235809343597, -0.5332258272751629, 0.05229946651419892, -0.5541761016746098, 0.9736243489476499, 0.731555584776238, 0.5457618042447461, -0.4448737015275219, -0.5392016921827363, 0.5716996291470369, -0.6960578680932665, -0.5414212165277654, -0.4090285597719858, 0.39104918929460597, 0.5189725236419076, 0.3706899897538458, -0.22933712076679225, -0.7407993350376323, 0.46855169130662744, -0.5135781060387206, -0.4497768123599397, -0.1203750614343082, 0.5829588485326991, 0.17070662909228052, -0.9192578428146998, -0.693094399739081, 0.8211883210524216, -0.5590711649998357, 0.4166533078849113, 0.6890049438853239, -0.7955532850551825, -0.5283919209160008, 0.8188500216956416, 0.5030542908939826, 0.41336728701435743, -0.49690469956134375, 2.6467173389641587, 2.995317426901443, -3.6346487715163387, -1.446474812468808, -1.8101917520628392, 2.6911308018138858, -3.6937512721388917, 2.00979276489379, -3.7765192063618604, 2.987740907256258, 0.33212884695798284))
    # print(manifest(0.559699275255479, 0.8013309618113191, 0.08338701490993022, -0.3064226972967041, -0.6552042010946098, 0.7470729250404746, -0.4135972777521839, 0.0187785185445426, 0.9068719880896925, 0.8450774231070375, 0.45366301876283144, 0.8371537340994002, 0.5184739500735651, -0.23171344481052225, 0.3024461249795527, -0.7335620863940253, -0.0932630037456943, -0.9595668587677866, -0.3933663406517227, -0.40838487068917284, -0.35646888502974794, 0.25891941915425165, 0.8271160337466472, 0.5211043187525222, -0.28773666491221395, 0.9557369880535365, -0.7133680290596156, -0.479287360946937, -0.902759821307692, 0.6282826970211521, -0.537405059223423, -0.094077799637581, 0.39719090552083425, 0.9111464232159618, -0.7809303261824063, -0.2629266496285929, -0.4156041287599024, -0.6933437137224145, -0.6939965268055293, -0.3521847719542719, 0.6972917457979049, 0.5041978755236698, -0.8241761595459032, -0.3422056704186154, -0.9710399460520782, 0.3771080394587101, 0.9145405865754284, 0.9835737164788523, 0.8082366055596297, 0.3840847741305822, 0.2547610181080453, 0.32010937713546483, 0.7656235809343597, -0.5332258272751629, 0.05229946651419892, -0.5541761016746098, 0.9736243489476499, 0.731555584776238, 0.5457618042447461, -0.4448737015275219, -0.5392016921827363, 0.5716996291470369, -0.6960578680932665, -0.5414212165277654, -0.4090285597719858, 0.39104918929460597, 0.5189725236419076, 0.3706899897538458, -0.22933712076679225, -0.7407993350376323, 0.46855169130662744, -0.5135781060387206, -0.4497768123599397, -0.1203750614343082, 0.5829588485326991, 0.17070662909228052, -0.9192578428146998, -0.693094399739081, 0.8211883210524216, -0.5590711649998357, 0.4166533078849113, 0.6890049438853239, -0.7955532850551825, -0.5283919209160008, 0.8188500216956416, 0.5030542908939826, 0.41336728701435743, -0.49690469956134375, 2.6467173389641587, 2.995317426901443, -3.6346487715163387, -1.446474812468808, -1.8101917520628392, 2.6911308018138858, -3.6937512721388917, 2.00979276489379, -3.7765192063618604, 2.987740907256258, 0.33212884695798284))
    print(manifest(0.559699275255479, 0.8013309618113191, 0.08338701490993022, -0.3064226972967041, -0.6552042010946098, 0.7470729250404746, -0.4135972777521839, 0.0187785185445426, 0.9068719880896925, 0.8450774231070375, 0.45366301876283144, 0.8371537340994002, 0.5184739500735651, -0.23171344481052225, 0.3024461249795527, -0.9435992544257685, -0.0932630037456943, -0.9595668587677866, -0.3933663406517227, -0.40838487068917284, -0.35646888502974794, 0.25891941915425165, 0.8271160337466472, 0.5211043187525222, -0.28773666491221395, 0.9557369880535365, -0.7133680290596156, -0.479287360946937, -0.902759821307692, 0.6282826970211521, -0.537405059223423, -0.094077799637581, 0.39719090552083425, 0.9111464232159618, 0.8656716950688623, -0.2629266496285929, -0.4156041287599024, -0.5901085281971596, -0.6939965268055293, -0.3521847719542719, 0.6972917457979049, 0.5041978755236698, -0.8241761595459032, -0.3422056704186154, -0.9710399460520782, 0.3771080394587101, 0.9145405865754284, 0.9835737164788523, 0.8082366055596297, 0.3840847741305822, 0.2547610181080453, 0.32010937713546483, 0.7656235809343597, -0.5332258272751629, 0.05229946651419892, -0.5541761016746098, 0.9736243489476499, 0.731555584776238, 0.5457618042447461, -0.4448737015275219, -0.5392016921827363, 0.5716996291470369, -0.6960578680932665, -0.5414212165277654, -0.4090285597719858, 0.39104918929460597, 0.5189725236419076, 0.3706899897538458, -0.22933712076679225, -0.7407993350376323, 0.46855169130662744, -0.5135781060387206, -0.4497768123599397, -0.1203750614343082, 0.5829588485326991, 0.17070662909228052, -0.9192578428146998, -0.693094399739081, 0.8211883210524216, -0.5590711649998357, 0.4166533078849113, 0.6890049438853239, -0.7955532850551825, -0.5283919209160008, 0.8188500216956416, 0.5030542908939826, 0.41336728701435743, -0.49690469956134375, 2.6467173389641587, 2.995317426901443, -0.16771875340007547, -1.446474812468808, -1.8101917520628392, 2.6911308018138858, -3.654396977672043, 2.00979276489379, -3.7765192063618604, 2.987740907256258, 0.33212884695798284))

